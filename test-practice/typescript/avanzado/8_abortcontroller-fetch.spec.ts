import { describe, expect, it } from "vitest";

describe("üåê AbortController + fetch simulado (AAA)", () => {
  it("simula una petici√≥n abortable", async () => {
    // Organizar
    const controlador = new AbortController();
    const { signal } = controlador;

    const fetchSimulado = (signal: AbortSignal) =>
      new Promise<string>((resolve, reject) => {
        const timer = setTimeout(() => resolve("‚úÖ completado"), 100);
        signal.addEventListener("abort", () => {
          clearTimeout(timer);
          reject(new Error("‚ùå abortado"));
        });
      });

    // Acci√≥n
    const promesa = fetchSimulado(signal);
    controlador.abort(); // cancelar de inmediato

    // Esperado
    await expect(promesa).rejects.toThrow("‚ùå abortado");
  });

  it("Promise.race: gana la respuesta m√°s r√°pida", async () => {
    // Organizar
    const lento = new Promise((res) => setTimeout(() => res("lento"), 100));
    const rapido = new Promise((res) => setTimeout(() => res("r√°pido"), 10));

    // Acci√≥n
    const ganador = await Promise.race([lento, rapido]);

    // Esperado
    expect(ganador).toBe("r√°pido");
  });
});
